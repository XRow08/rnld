/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface ClaimInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "BLACKLISTER_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "blacklisted"
      | "burn"
      | "claimTokens"
      | "decimals"
      | "excludedFromVesting"
      | "getClaimStatus"
      | "getRoleAdmin"
      | "getTransferableAmount"
      | "getVestingInfo"
      | "grantRole"
      | "hasClaimed"
      | "hasRole"
      | "isBlacklisted"
      | "isExcludedFromVesting"
      | "merkleRoot"
      | "name"
      | "renounceRole"
      | "revokeRole"
      | "setBlacklisted"
      | "setExcludedFromVesting"
      | "setMerkleRoot"
      | "setTokenURI"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "transferredTokens"
      | "vestingSchedules"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "Blacklisted"
      | "ExcludedFromVesting"
      | "MerkleRootSet"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "TokensBurned"
      | "TokensClaimed"
      | "Transfer"
      | "VestingScheduleCreated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BLACKLISTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "excludedFromVesting",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimStatus",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransferableAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVestingInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasClaimed",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlacklisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isExcludedFromVesting",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "merkleRoot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlacklisted",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setExcludedFromVesting",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMerkleRoot",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "setTokenURI", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenURI", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferredTokens",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingSchedules",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BLACKLISTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "excludedFromVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransferableAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVestingInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isExcludedFromVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "merkleRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBlacklisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExcludedFromVesting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTokenURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferredTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingSchedules",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlacklistedEvent {
  export type InputTuple = [account: AddressLike, blacklisted: boolean];
  export type OutputTuple = [account: string, blacklisted: boolean];
  export interface OutputObject {
    account: string;
    blacklisted: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExcludedFromVestingEvent {
  export type InputTuple = [account: AddressLike, excluded: boolean];
  export type OutputTuple = [account: string, excluded: boolean];
  export interface OutputObject {
    account: string;
    excluded: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MerkleRootSetEvent {
  export type InputTuple = [merkleRoot: BytesLike];
  export type OutputTuple = [merkleRoot: string];
  export interface OutputObject {
    merkleRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensBurnedEvent {
  export type InputTuple = [burner: AddressLike, amount: BigNumberish];
  export type OutputTuple = [burner: string, amount: bigint];
  export interface OutputObject {
    burner: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokensClaimedEvent {
  export type InputTuple = [account: AddressLike, amount: BigNumberish];
  export type OutputTuple = [account: string, amount: bigint];
  export interface OutputObject {
    account: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VestingScheduleCreatedEvent {
  export type InputTuple = [
    beneficiary: AddressLike,
    totalAmount: BigNumberish,
    tgeAmount: BigNumberish,
    vestingDuration: BigNumberish,
    cliffDuration: BigNumberish
  ];
  export type OutputTuple = [
    beneficiary: string,
    totalAmount: bigint,
    tgeAmount: bigint,
    vestingDuration: bigint,
    cliffDuration: bigint
  ];
  export interface OutputObject {
    beneficiary: string;
    totalAmount: bigint;
    tgeAmount: bigint;
    vestingDuration: bigint;
    cliffDuration: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Claim extends BaseContract {
  connect(runner?: ContractRunner | null): Claim;
  waitForDeployment(): Promise<this>;

  interface: ClaimInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  BLACKLISTER_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  blacklisted: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  burn: TypedContractMethod<[amount: BigNumberish], [boolean], "nonpayable">;

  claimTokens: TypedContractMethod<
    [amount: BigNumberish, proof: BytesLike[]],
    [void],
    "nonpayable"
  >;

  decimals: TypedContractMethod<[], [bigint], "view">;

  excludedFromVesting: TypedContractMethod<
    [arg0: AddressLike],
    [boolean],
    "view"
  >;

  getClaimStatus: TypedContractMethod<
    [account: AddressLike],
    [[boolean, boolean] & { claimed: boolean; claimable: boolean }],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTransferableAmount: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  getVestingInfo: TypedContractMethod<
    [account: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalAmount: bigint;
        tgeAmount: bigint;
        vestedAmount: bigint;
        vestingDuration: bigint;
        vestingStartTime: bigint;
        cliffDuration: bigint;
        transferableAmount: bigint;
        transferredAmount: bigint;
      }
    ],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasClaimed: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isBlacklisted: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  isExcludedFromVesting: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  merkleRoot: TypedContractMethod<[], [string], "view">;

  name: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setBlacklisted: TypedContractMethod<
    [account: AddressLike, _isBlacklisted: boolean],
    [void],
    "nonpayable"
  >;

  setExcludedFromVesting: TypedContractMethod<
    [account: AddressLike, excluded: boolean],
    [void],
    "nonpayable"
  >;

  setMerkleRoot: TypedContractMethod<
    [_merkleRoot: BytesLike],
    [void],
    "nonpayable"
  >;

  setTokenURI: TypedContractMethod<[_tokenURI: string], [void], "nonpayable">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenURI: TypedContractMethod<[], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferredTokens: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  vestingSchedules: TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        totalAmount: bigint;
        tgeAmount: bigint;
        vestedAmount: bigint;
        vestingDuration: bigint;
        vestingStartTime: bigint;
        cliffDuration: bigint;
        initialized: boolean;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BLACKLISTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, value: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "blacklisted"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[amount: BigNumberish], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "claimTokens"
  ): TypedContractMethod<
    [amount: BigNumberish, proof: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "excludedFromVesting"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "getClaimStatus"
  ): TypedContractMethod<
    [account: AddressLike],
    [[boolean, boolean] & { claimed: boolean; claimable: boolean }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTransferableAmount"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVestingInfo"
  ): TypedContractMethod<
    [account: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, bigint, bigint] & {
        totalAmount: bigint;
        tgeAmount: bigint;
        vestedAmount: bigint;
        vestingDuration: bigint;
        vestingStartTime: bigint;
        cliffDuration: bigint;
        transferableAmount: bigint;
        transferredAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasClaimed"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isBlacklisted"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isExcludedFromVesting"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "merkleRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, callerConfirmation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBlacklisted"
  ): TypedContractMethod<
    [account: AddressLike, _isBlacklisted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setExcludedFromVesting"
  ): TypedContractMethod<
    [account: AddressLike, excluded: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setMerkleRoot"
  ): TypedContractMethod<[_merkleRoot: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTokenURI"
  ): TypedContractMethod<[_tokenURI: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferredTokens"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "vestingSchedules"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [bigint, bigint, bigint, bigint, bigint, bigint, boolean] & {
        totalAmount: bigint;
        tgeAmount: bigint;
        vestedAmount: bigint;
        vestingDuration: bigint;
        vestingStartTime: bigint;
        cliffDuration: bigint;
        initialized: boolean;
      }
    ],
    "view"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "Blacklisted"
  ): TypedContractEvent<
    BlacklistedEvent.InputTuple,
    BlacklistedEvent.OutputTuple,
    BlacklistedEvent.OutputObject
  >;
  getEvent(
    key: "ExcludedFromVesting"
  ): TypedContractEvent<
    ExcludedFromVestingEvent.InputTuple,
    ExcludedFromVestingEvent.OutputTuple,
    ExcludedFromVestingEvent.OutputObject
  >;
  getEvent(
    key: "MerkleRootSet"
  ): TypedContractEvent<
    MerkleRootSetEvent.InputTuple,
    MerkleRootSetEvent.OutputTuple,
    MerkleRootSetEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "TokensBurned"
  ): TypedContractEvent<
    TokensBurnedEvent.InputTuple,
    TokensBurnedEvent.OutputTuple,
    TokensBurnedEvent.OutputObject
  >;
  getEvent(
    key: "TokensClaimed"
  ): TypedContractEvent<
    TokensClaimedEvent.InputTuple,
    TokensClaimedEvent.OutputTuple,
    TokensClaimedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "VestingScheduleCreated"
  ): TypedContractEvent<
    VestingScheduleCreatedEvent.InputTuple,
    VestingScheduleCreatedEvent.OutputTuple,
    VestingScheduleCreatedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "Blacklisted(address,bool)": TypedContractEvent<
      BlacklistedEvent.InputTuple,
      BlacklistedEvent.OutputTuple,
      BlacklistedEvent.OutputObject
    >;
    Blacklisted: TypedContractEvent<
      BlacklistedEvent.InputTuple,
      BlacklistedEvent.OutputTuple,
      BlacklistedEvent.OutputObject
    >;

    "ExcludedFromVesting(address,bool)": TypedContractEvent<
      ExcludedFromVestingEvent.InputTuple,
      ExcludedFromVestingEvent.OutputTuple,
      ExcludedFromVestingEvent.OutputObject
    >;
    ExcludedFromVesting: TypedContractEvent<
      ExcludedFromVestingEvent.InputTuple,
      ExcludedFromVestingEvent.OutputTuple,
      ExcludedFromVestingEvent.OutputObject
    >;

    "MerkleRootSet(bytes32)": TypedContractEvent<
      MerkleRootSetEvent.InputTuple,
      MerkleRootSetEvent.OutputTuple,
      MerkleRootSetEvent.OutputObject
    >;
    MerkleRootSet: TypedContractEvent<
      MerkleRootSetEvent.InputTuple,
      MerkleRootSetEvent.OutputTuple,
      MerkleRootSetEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "TokensBurned(address,uint256)": TypedContractEvent<
      TokensBurnedEvent.InputTuple,
      TokensBurnedEvent.OutputTuple,
      TokensBurnedEvent.OutputObject
    >;
    TokensBurned: TypedContractEvent<
      TokensBurnedEvent.InputTuple,
      TokensBurnedEvent.OutputTuple,
      TokensBurnedEvent.OutputObject
    >;

    "TokensClaimed(address,uint256)": TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;
    TokensClaimed: TypedContractEvent<
      TokensClaimedEvent.InputTuple,
      TokensClaimedEvent.OutputTuple,
      TokensClaimedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "VestingScheduleCreated(address,uint256,uint256,uint256,uint256)": TypedContractEvent<
      VestingScheduleCreatedEvent.InputTuple,
      VestingScheduleCreatedEvent.OutputTuple,
      VestingScheduleCreatedEvent.OutputObject
    >;
    VestingScheduleCreated: TypedContractEvent<
      VestingScheduleCreatedEvent.InputTuple,
      VestingScheduleCreatedEvent.OutputTuple,
      VestingScheduleCreatedEvent.OutputObject
    >;
  };
}
